/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.rbb.similarproducts.openapi.api;

import com.rbb.similarproducts.openapi.model.ProductDetail;
import java.util.Set;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-11T17:36:49.238456500+02:00[Europe/Paris]")
@Validated
@Api(value = "product", description = "the product API")
public interface ProductApi {

    /**
     * GET /product/{productId}/similar : Similar products
     *
     * @param productId  (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Similar products", nickname = "getProductSimilar", notes = "", response = ProductDetail.class, responseContainer = "Set", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProductDetail.class, responseContainer = "Set") })
    @GetMapping(
        value = "/product/{productId}/similar",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<ProductDetail>>> getProductSimilar(@ApiParam(value = "",required=true) @PathVariable("productId") String productId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\", \"availability\" : true }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
